# The container definition we want to use for developing our app
# box: oraclelinux:7.3

build:
  box: golang
  steps:
   - setup-go-workspace:
      package-dir: weblogic-operator

   - script:
      name: install go tools
      code: |
       go version

   - script:
      name: install dependencies
      code: |
       set GOROOT=/usr/local/go
       set GOPATH=$HOME/go
       set GOBIN=$GOPATH/bin
       set PATH=$GOPATH:$GOBIN:$PATH

       cd $WERCKER_SOURCE_DIR
       make vendor

   - script:
      name: build and stage the project
      code: |
       make docker-stage
       cp -r docker-stage/. $WERCKER_OUTPUT_DIR/


push-release:
  box: oraclelinux:7.3
  steps:
   - internal/docker-push:
      name: push the operator image to repo
      username: $GCR_IO_USERNAME
      password: $GCR_KEY_JSON
      repository: gcr.io/fmwplt-gcp/weblogic-operator
      tag: $OPERATOR_DOCKER_IMAGE_TAG
      entrypoint: "/pipeline/source/weblogic-operator"
      registry: https://gcr.io/v2

#deploy-to-kubernetes:
#    box: python:2.7
#    steps:
#
#    # https://github.com/wercker/step-bash-template
#    # This Wercker step will look for files in our repo with a .template extension.
#    # It will expand any environment variables in those files, then remove the
#    # template extension.
#    - bash-template
#
#    # The step above should leave us with a Kubernetes service and deployment yml files.
#    # We'll create a directory to move them to.
#    - script:
#        name: Prepare Kubernetes files
#        code: |
#          mkdir $WERCKER_OUTPUT_DIR/kubernetes
#          mv kubernetes_*.yml $WERCKER_OUTPUT_DIR/kubernetes
#    # Since we're using GKE, we'll use a fork of the kubectl step that supports
#    # GKE service account authentication. We need to pass some GKE specific configuration
#    # to ensure we can authenticate, then point kubectl at the directory containing our
#    # Kubernetes configuration.
#
#    # `apply` is a good command to use here, as it'll create Kubernetes entities if they are missing.
#    - riceo/kubectl:
#        name: deploy to kubernetes
#        server: $KUBERNETES_MASTER
#        gcloud-key-json: $GCP_KEY_JSON
#        gke-cluster-name: $GKE_CLUSTER_NAME
#        gke-cluster-zone: $GKE_CLUSTER_ZONE
#        gke-cluster-project: $GKE_CLUSTER_PROJECT
#        command: apply -f $WERCKER_OUTPUT_DIR/kubernetes/
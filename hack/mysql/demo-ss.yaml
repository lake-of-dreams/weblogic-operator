apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: mysql
spec:
  serviceName: "mysql"
  replicas: 3

  updateStrategy:
    type: RollingUpdate

  template:
    metadata:
      labels:
        app: mysql
    spec:
      imagePullSecrets:
        - name: odx-docker-pull-secret        
      containers:

      # This is the MYSQL server container.
      - name: mysql
        image: registry.oracledx.com/skeppare/mysql-enterprise-server:5.7.19-1.1.0
        command:
        - "/bin/bash"
        - "-ecx"
        - |
          # Note: We fiddle with the resolv.conf file in order to ensure that the mysql instances
          # can refer to each other using just thier hostnames (i.e. mysql-N), thus do not need 
          # to qualify their names with the name of the (headless) service (i.e. mysql-N.mysql)    
          search=$(grep ^search /etc/resolv.conf)
          echo "$search mysql.default.svc.cluster.local" >> /etc/resolv.conf

          # Creates a file, the presence of which will signal to the init container 
          # below that it needs to wake up, wait for the server below to be up and running, 
          # then and do its configuring thing. Note: we need to schedule this to be done in the 
          # future, as the presence of any files in the mysql data directory prior to mysql starting for 
          # the first time will cause the server to fail to start.
          sleep 30 && touch /var/lib/mysql/CONFIGUREME &

          # Finds the replica index from the hostname, and uses this to define 
          # a unique server id for this instance.
          index=$(cat /etc/hostname | cut -d'-' -f 2)
          /entrypoint.sh --server_id=$(expr 1000 + $index) \
                         --loose-group_replication_group_name=a17e8e4b-f6bf-4a4e-9fcb-5c1db6f2c93f \
                         --loose-group_replication_local_address=mysql-$index:17001 \
                         --loose-group_replication_group_seeds=mysql-0:17001,mysql-1:17001,mysql-2:17001 \
                         --plugin-load=group_replication.so \
                         --group_replication_start_on_boot=ON

        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "password"
        - name: MYSQL_ROOT_HOST
          value: "%"
        ports:
        - containerPort: 7001
          name: mysql
        volumeMounts:
        - name: conf
          mountPath: /etc/my.cnf
          subPath: my.cnf
        - name: test-volume
          mountPath: /var/lib/mysql

      # This is the MYSQL initialisation container. Its jobs is to wait for the above MYSQL
      # server to signal it is starting, wait for it to start up fully, then deal with the 
      # initialisation of the InnoDb cluster. There are 3 cases to consider:
      # 1) No cluster exists => create the cluster.
      # 2) The cluster exists but this MYSQL server instance has never been a member => add this instance.
      # 3) The cluster exists and this instance has been a member, but is now missing => rejoin this instance.
      - name: mysql-init
        image: registry.oracledx.com/skeppare/mysql-enterprise-server:5.7.19-1.1.0
        command:
        - "/bin/bash"
        - "-cx"
        - |
          index=$(cat /etc/hostname | cut -d'-' -f 2)

          while true; do
              if [ -f /var/lib/mysql/CONFIGUREME ]; then

                  if [ ! -f /var/lib/mysql/INITIALISED ]; then

                      # Waits for the mysql server to be up and running.
                      until mysqladmin --protocol tcp -u root -p$MYSQL_ROOT_PASSWORD status > /dev/null 2>&1; do
                          echo "mysql-init[$index]: waiting for the server to initialise..."
                          sleep 5
                      done

                      echo "mysql-init[$index]: clearing the MQSQL binary logs"
                      mysql --protocol tcp -u root -p$MYSQL_ROOT_PASSWORD -e 'reset master;'

                      if [ $index -eq 0 ]; then
                          echo "mysql-init[$index]: creating the cluster on the pimary instance"
                          mysqlsh --log-level=DEBUG3 --uri root:$MYSQL_ROOT_PASSWORD@mysql-0:7001 --py -e \
                              "import json; \
                               dba.create_cluster('devCluster'); \
                               print json.dumps(json.loads(str(dba.get_cluster('devCluster').status())), indent=4, sort_keys=True)"
                      else
                          # Waits for the InnoDb cluster to be created.
                          until mysqlsh --uri root:$MYSQL_ROOT_PASSWORD@mysql-0:7001 --py -e "dba.get_cluster('devCluster')" > /dev/null 2>&1; do
                              echo "mysql-init[$index]: waiting for the cluster to be created..."
                              sleep 5
                          done

                          echo "mysql-init[$index]: adding secondary instance to the cluster..."
                          mysqlsh --log-level=DEBUG3 --uri root:$MYSQL_ROOT_PASSWORD@mysql-0:7001 --py -e \
                              "import json; \
                               dba.get_cluster('devCluster').add_instance('root:$MYSQL_ROOT_PASSWORD@mysql-$index:7001'); \
                               print json.dumps(json.loads(str(dba.get_cluster('devCluster').status())), indent=4, sort_keys=True)"
                      fi
                      touch /var/lib/mysql/INITIALISED
                  else
                      echo "mysql-init[$index]: cluster already exists. attempting to rejoin"
                      target=$((($index + 1) % 3))
                      mysqlsh --log-level=DEBUG3 --uri root:$MYSQL_ROOT_PASSWORD@mysql-$target:7001 --py -e \
                          "import json; \
                           dba.get_cluster('devCluster').rejoin_instance('root:$MYSQL_ROOT_PASSWORD@mysql-$index:7001'); \
                           print json.dumps(json.loads(str(dba.get_cluster('devCluster').status())), indent=4, sort_keys=True)"
                  fi
          
                  echo "mysq-init[$index]: configuration complete."
                  rm -rf /var/lib/mysql/CONFIGUREME 

              else
                  echo "mysql-init[$index]: nothing to do. zzzzzzzzzz"
                  sleep 60
              fi
          done

        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "password"
        volumeMounts:
        - name: conf
          mountPath: /etc/my.cnf
          subPath: my.cnf
        - name: test-volume
          mountPath: /var/lib/mysql

      volumes:
      - name: conf
        configMap:
          name: mysql
      - name: test-volume
        hostPath:
          path: /mysql-data


start: create-network start-master check-master-config start-slaves check-slave-config create-cluster add-instances cluster-status

stop: stop-instances delete-network

create-network:
	@echo "======================================================================="
	@echo "Creating the docker network"
	@echo "======================================================================="
	docker network create --ipv6=false mysql-test

start-master:
	@echo "======================================================================="
	@echo "Starting the master MYSQL instance"
	@echo "======================================================================="
	docker run --name mysql1 --net=mysql-test -e MYSQL_ROOT_HOST=% -e MYSQL_ROOT_PASSWORD=password \
	    -v `pwd`/my.cnf:/etc/my.cnf \
	    -d registry.oracledx.com/skeppare/mysql-enterprise-server:5.7.19-1.1.0 \
	    --server_id=474 \
	    --loose-group_replication_group_name=a17e8e4b-f6bf-4a4e-9fcb-5c1db6f2c93f
	@echo "Waiting for the msql master to start..."
	@sleep 40
	@docker logs mysql1 | tail -n 1
	@docker exec -it mysql1 cat /var/lib/mysql/mysqld.err > mysqld1.err 

check-master-config:
	@echo "======================================================================="
	@echo "Checking the master config"
	@echo "======================================================================="
	docker exec -it mysql1 mysqlsh --log-level=DEBUG3 --uri root:password@172.19.0.2:3306 --py -e \
	    "print dba.check_instance_configuration('root:password@172.19.0.2:3306')"

create-cluster:
	@echo "======================================================================="
	@echo "Creating the cluster"
	@echo "======================================================================="
	docker exec -it mysql1 mysqlsh --log-level=DEBUG3 --uri root:password@172.19.0.2:3306 --py -e \
	    "dba.create_cluster('devCluster')"
	@docker exec -it mysql1 cat /var/lib/mysql/mysqld.err > mysqld1.err 

start-slaves:
	@echo "======================================================================="
	@echo "Starting the slave MYSQL instances"
	@echo "======================================================================="
	docker run --name mysql2 --net=mysql-test -e MYSQL_ROOT_HOST=% -e MYSQL_ROOT_PASSWORD=password \
	    -v `pwd`/my.cnf:/etc/my.cnf \
	    -d registry.oracledx.com/skeppare/mysql-enterprise-server:5.7.19-1.1.0 \
	    --server_id=475 \
	    --loose-group_replication_start_on_boot=ON \
	    --loose-group_replication_group_name=a17e8e4b-f6bf-4a4e-9fcb-5c1db6f2c93f \
	    --loose-group_replication_local_address=mysql2:13306 \
	    --loose-group_replication_group_seeds=mysql1:13306 \
		--loose-group_replication_allow_local_disjoint_gtids_join=ON
	docker run --name mysql3 --net=mysql-test -e MYSQL_ROOT_HOST=% -e MYSQL_ROOT_PASSWORD=password \
	    -v `pwd`/my.cnf:/etc/my.cnf \
	    -d registry.oracledx.com/skeppare/mysql-enterprise-server:5.7.19-1.1.0 \
	    --server_id=476 \
	    --loose-group_replication_start_on_boot=ON \
	    --loose-group_replication_group_name=a17e8e4b-f6bf-4a4e-9fcb-5c1db6f2c93f \
	    --loose-group_replication_local_address=mysql3:13306 \
	    --loose-group_replication_group_seeds=mysql1:13306 \
		--loose-group_replication_allow_local_disjoint_gtids_join=ON
	@echo "Waiting for the msql slaves to start..."
	@sleep 40
	@docker logs mysql2 | tail -n 1
	@docker logs mysql3 | tail -n 1
	@docker exec -it mysql2 cat /var/lib/mysql/mysqld.err > mysqld2.err 
	@docker exec -it mysql3 cat /var/lib/mysql/mysqld.err > mysqld3.err 

check-slave-config:
	@echo "======================================================================="
	@echo "Checking the slave config"
	@echo "======================================================================="
	docker exec -it mysql1 mysqlsh --log-level=DEBUG3 --uri root:password@172.19.0.2:3306 --py -e \
	    "print dba.check_instance_configuration('root:password@172.19.0.3:3306'); \
	     print dba.check_instance_configuration('root:password@172.19.0.4:3306')"

add-instances:
	@echo "======================================================================="
	@echo "Adding the slave instances to the cluster"
	@echo "======================================================================="
	docker exec -it mysql1 mysqlsh --log-level=DEBUG3 --uri root:password@172.19.0.2:3306 --py -e \
	    "dba.get_cluster('devCluster').add_instance('root:password@172.19.0.3:3306')"
	docker exec -it mysql1 mysqlsh --log-level=DEBUG3 --uri root:password@172.19.0.2:3306 --py -e \
	    "dba.get_cluster('devCluster').add_instance('root:password@172.19.0.4:3306')"
	@docker exec -it mysql2 cat /var/lib/mysql/mysqld.err > mysqld2.err 
	@docker exec -it mysql3 cat /var/lib/mysql/mysqld.err > mysqld3.err 

cluster-status:
	@echo "======================================================================="
	@echo "Cluster Status:"
	@echo "======================================================================="
	docker exec -it mysql1 mysqlsh --log-level=DEBUG3 --uri root:password@172.19.0.2:3306 --py -e \
	    "import json; \
	     status = dba.get_cluster('devCluster').status(); \
	     parsed = json.loads(str(status)); \
         print json.dumps(parsed, indent=4, sort_keys=True)"

stop-instances:
	@echo "======================================================================="
	@echo "Stopping all MYSQL instances:"
	@echo "======================================================================="
	docker rm -f mysql1 mysql2 mysql3

delete-network:
	@echo "======================================================================="
	@echo "Deleting the docker network:"
	@echo "======================================================================="
	docker network rm mysql-test
